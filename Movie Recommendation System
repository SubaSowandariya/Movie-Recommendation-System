import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics.pairwise import cosine_similarity

# Load data in chunks
chunk_size = 1000
chunks = pd.read_csv('ratings.csv', chunksize=chunk_size)

# Process each chunk
ratings = pd.concat(chunks)

# Sample data (if you want to use only a portion of the data)
ratings = ratings.sample(n=5000, random_state=42)

# Load movies data
movies = pd.read_csv('movies.csv')

# Merge datasets
movie_ratings = pd.merge(ratings, movies, on='movieId')

# Preprocess data
movies['title'] = movies['title'].str.strip() 

# Convert genres into a list of genres
movies['genres'] = movies['genres'].str.split('|')

# Encode genres using one-hot encoding
genres_encoded = movies['genres'].str.join('|').str.get_dummies()
movies = pd.concat([movies, genres_encoded], axis=1)

# Drop unnecessary columns
movies.drop(columns=['genres'], inplace=True)

# Split data into train and test sets
train_data, test_data = train_test_split(movie_ratings, test_size=0.2, random_state=42)

# Create a user-item matrix for collaborative filtering
user_item_matrix = train_data.pivot_table(index='userId', columns='movieId', values='rating').fillna(0)

# Calculate similarity between items (movies)
item_similarity = cosine_similarity(user_item_matrix.T)

# Function to recommend movies based on input movie title
def recommend_movies(movie_title, top_n=5):
    movie_idx = movies[movies['title'] == movie_title].index[0]
    similar_movies = sorted(list(enumerate(item_similarity[movie_idx])), key=lambda x: x[1], reverse=True)[1:]
    recommended_movies = []
    for i in range(top_n):
        movie_id = similar_movies[i][0]
        recommended_movies.append(movies.iloc[movie_id]['title'])
    return recommended_movies

# Example usage
input_movie = "Toy Story (1995)"
recommended_movies = recommend_movies(input_movie)
print("Recommended movies for '{}':".format(input_movie))
for movie in recommended_movies:
    print(movie)
